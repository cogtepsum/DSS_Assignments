bye()
0
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.Date()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, unit = 'days')
data("cars")
data(cars)
?cars
head(cars)
ploy(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, title('My Plot'))
plot(cars, main = "My Plot")
plot(cars, subtitle = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
play()
class(mtcars)
head(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$hp[which(mtcars$cyl==4)]) - mean(mtcars$hp[which(mtcars$cyl==8)])
source("cachematrix.R")
source("cachematrix")
source(cachematrix.R)
## first function creates a "matrix" (e.g. list of functions to operate with a matrix)
## second one is to obtain an inverse of the matrix from the first function
## this function provide list of functions to set and get values of matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv < NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## this fuction calculates or returns existing value of an inverse of the argument
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinv(inv)
inv
}
M <- matrix(1:9, 3, 3)
M
makeCacheMatrix(M)
## first function creates a "matrix" (e.g. list of functions to operate with a matrix)
## second one is to obtain an inverse of the matrix from the first function
## this function provide list of functions to set and get values of matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## this fuction calculates or returns existing value of an inverse of the argument
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(M)
makeCacheMatrix().set(M)
cachematrix <- makeCacheMatrix(M)
cachematrix.set(M)
cachematrix["set"]
cachematrix["set"](M)
cachematrix["set"(M)]
cachematrix["set"](M)
cachematrix["set"]
cachematrix["get"]
cachematrix["get()"]
cachematrix["set(M)"]
cachematrix[1]
cachematrix[1](M)
cachematrix[1]()
do.call(cachematrix["set"], M)
do.call(cachematrix["set"], M, FALSE)
do.call(cachematrix["set"], M, F)
do.call(cachematrix["set"], M, T)
do.call(cachematrix["set"], M)
do.call(cachematrix["set"], M...)
do.call(cachematrix["set"], list(M))
class(cachematrix[1])
do.call(cachematrix[["set"]], list(M))
do.call(cachematrix[["get"]], list())
cacheSolve(M)
cacheSolve(cachematrix)
cacheSolve(cachematrix['get'])
cacheSolve(cachematrix[['get']])
cachematrix$getinv()
cacheSolve(cachematrix)
inv <- solve(x$get, ...)
## first function creates a "matrix" (e.g. list of functions to operate with a matrix)
## second one is to obtain an inverse of the matrix from the first function
## this function provide list of functions to set and get values of matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## this fuction calculates or returns existing value of an inverse of the argument
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x$get, ...)
x$setinv(inv)
inv
}
cacheSolve(cachematrix)
## first function creates a "matrix" (e.g. list of functions to operate with a matrix)
## second one is to obtain an inverse of the matrix from the first function
## this function provide list of functions to set and get values of matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## this fuction calculates or returns existing value of an inverse of the argument
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(cachematrix)
solve(matrix(1:9, 3, 3))
solve(matrix(4:13, 3, 3))
solve(matrix(4:12, 3, 3))
M <- [[7, 4], [5, 3]]
M <- ([7, 4], [5, 3])
M <- matrix(c(7, 4, 5, 3), 2, 2)
cachematrix <- makeCacheMatrix(M)
cacheSolve(cachematrix)
cacheSolve(cachematrix)
cachematrix[["set"]](matrix(c(7, 4, 5, 3, 4, 2), 3, 3))
cachematrix[["getinv"]]()
## first function creates a "matrix" (e.g. list of functions to operate with a matrix)
## second one is to obtain an inverse of the matrix from the first function
## this function provide list of functions to set and get values of matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## this fuction calculates or returns existing value of an inverse of the argument
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cachematrix[["set"]](matrix(c(7, 4, 5, 3, 4, 2), 3, 3))
cachematrix[["getinv"]]()
cachematrix[["ge"]]()
cachematrix[["get"]]()
cachematrix[["set"]](matrix(c(7, 4, 5, 3, 9, 23, 15, 2, 7, 9, 18, 5), 3, 3))
cachematrix[["getinv"]]()
source('C:/Users/cogtepsum/Desktop/PA2/ProgrammingAssignment2/cachematrix.R')
cachematrix <- makeCacheMatrix(M)
cachematrix$get()
cachematrix$getinv()
cacheSolve(cachematrix)
cachematrix$set(matrix(c(7, 4, 5, 3, 9, 23, 15, 2, 7, 9, 18, 5), 3, 3))
cachematrix$getinv()
source('C:/Users/cogtepsum/Desktop/PA2/ProgrammingAssignment2/cachematrix.R')
cachematrix$getinv()
cachematrix$set(matrix(c(7, 4, 5, 3, 9, 23, 15, 2, 7, 9, 18, 5), 3, 3))
cachematrix$getinv()
cacheSolve(cachematrix)
cachematrix$get()
source('C:/Users/cogtepsum/Desktop/PA2/ProgrammingAssignment2/cachematrix.R')
cachematrix$set(matrix(c(7, 4, 5, 3, 9, 23, 15, 2, 7, 9, 18, 5), 3, 3))
cachematrix$getinv()
clear
clc
source('C:/Users/cogtepsum/Desktop/PA2/ProgrammingAssignment2/cachematrix.R')
cm <- makeCacheMatrix(matrix(c(7, 4, 5, 3), 2, 2))
cm$get()
cm$getinv()
cacheSolve(cm)
cm$getinv()
cm$set(matrix(1:9, 3, 3))
cm$getinv()
cacheSolve(cm)
cm$set(matrix(c(3, 8, 6, 1), 2, 2))
cm$getinv()
cacheSolve(cm)
cacheSolve(cm)
source('C:/Users/cogtepsum/Desktop/PA2/ProgrammingAssignment2/cachematrix.R')
cm$get()
cm$getinv()
cm$set(matrix(c(3, 8, 6, 1), 2, 2))
cm$getinv()
cacheSolve(cm)
library(datasets)
cars
cars[1]
plot(cars[1], cars[2])
cars[2]
cars[2, 1]
plot(cars)
hist(cars[2])
hist(cars[1])
hist(cars)
typeof(cars)
typeof(cars[1])
hist(cars['Speed'])
hist(cars['Speed',])
cars['Speed',]
cars['Speed']
cars[,'Speed']
cars[1]
cars$speed
hist(cars$speed)
?hist
hist(cars$speed, breaks=10)
hist(cars$speed, breaks=12)
hist(cars$speed, breaks=13)
hist(cars$speed, breaks=3)
hist(cars$speed, breaks=30)
hist(cars$speed, breaks=300)
hist(cars$speed, breaks=3)
?pch
plot(cars, pch='o')
plot(cars, pch='l')
plot(cars, pch='g')
plot(cars, pch='/')
plot(cars, pch='.')
plot(cars, pch='9')
plot(cars, pch=o)
plot(cars, pch='circle')
plot(cars, pch='/c')
plot(cars, pch='\')
c
plot(cars, pch='\c')
plot(cars, pch='\o')
plot(cars, pch="o")
plot(cars)
library(lattice)
library(datasets)
plt <- xyplot(Ozone ~ Wind, data = airquality)
class(plt)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
text(10, 10, "text")
axis(1)
lines(weight, Time)
lines(BodyWeight$weight, Time)
lines(BodyWeight$weight, BodyWeight$Time)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = 'loess')
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth('loess')
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = 'USCommunities.csv', mmethod = 'curl')
download.file(fileUrl, destfile = 'USCommunities.csv', method = 'curl')
ls
ls()
download.file(fileUrl, destfile = './USCommunities.csv', method = 'curl')
library(libcurl)
library(RCurl)
fileUrl <- getURL(fileUrl)
Url <- getURL(fileUrl)
Url <- getURL(fileUrl, ssl.verifypeer = FALSE)
data <- read.csv(textConnection(Url))
dim(data)
agricultureLogical <- data$ACR == 3 & data$AGS == 6
head(data[which(agricultureLogical)], 3)
head(data[which(agricultureLogical),], 3)
install.packages("jpeg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg', method = 'curl')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg')
readJPEG('fjeff.jpg', native=TRUE)
library(jpeg)
readJPEG('fjeff.jpg', native=TRUE)
image <-readJPEG('fjeff.jpg', native=TRUE)
image <- readJPEG('fjeff.jpg', native=TRUE)
image <- readJPEG('fjeff.jpg', native=TRUE)
summary(image)
quantile(image)
quantile(image, c(.3, .8))
quantile(image, c(.3, .8), na.rm = T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg')
readJPEG('fjeff.jpg', native=TRUE)
image <- readJPEG('fjeff.jpg', native=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg')
image <- readJPEG('fjeff.jpg', native=TRUE)
quantile(image, c(.3, .8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg', method='curl')
install.packages('libcurl')
library(libcurl)
url <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = 'fjeff.jpg', mode = 'wb')
image <- readJPEG('fjeff.jpg', native=TRUE)
quantile(image, c(.3, .8))
GrossProduct <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"))
head(GrossProduct)
str(GrossProduct)
edudata <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"))
str(edudata)
intersect(GrossProduct$X, edudata$CountryCode)
length(intersect(GrossProduct$X, edudata$CountryCode))
out <- merge(GrossProduct, edudata, by.x = 'X', by.y = 'CountryCode')
head(out)
dim(out)
out <- sort(out, decreasing = T)
out <- sort(out$Gross.domestic.product.2012, decreasing = T)
out[13, ]
out[,13]
out[13, 1]
dim(out)
out <- merge(GrossProduct, edudata, by.x = 'X', by.y = 'CountryCode')
sort(out$Gross.domestic.product.2012, decreasing = T)
dim(out)
out[13, 1]
sorted <- sort(out$Gross.domestic.product.2012, decreasing = T)
dim(sorted)
sorted <- out[order(out$Gross.domestic.product.2012, desc=T), ]
sorted <- out[order(out$Gross.domestic.product.2012), ]
tail(sorted$X)
tail(sorted$X, 13)
sorted <- out[order(out$Gross.domestic.product.2012, decreasing = T), ]
sorted[13, 1]
gdp <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = 'GDP.csv')
summary(gdp)
str(gdp)
gdp <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"), stringsAsFactors = False, header = FALSE)
gdp <- read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"), stringsAsFactors = FALSE, header = FALSE)
str(gdp)
head(gdp, 10)
tail(gdp)
tail(gdp, 10)
tail(gdp, 20)
gdp <- grp[which(gdp$V1 != ""),]
gdp <- gdp[which(gdp$V1 != ""),]
head(gdp)
tidyGDP <- gdp[,:5]
tidyGDP <- gdp[,1:5]
head(tidyGDP)
dim(tidyGDP)
tidyGDP <- gdp[,c(1, 2, 4, 5)]
head(tidyGDP)
dim(tidyGDP)
length(intersect(tidyGDP$V1, edudata$CountryCode))
tail(tidyGDP)
tidyGDP <- tidyGDP[which(tidyGDP$V2 != ""),]
tail(tidyGDP)
length(intersect(tidyGDP$V1, edudata$CountryCode))
sorted <- tidyGDP[order(tidyGDP$V2, decreasing = T),]
sorted[13, 1]
head(sorted, 13)
library(plyr)
arrange(sorted, desc(sorted$V2))
str(sorted)
transform(sorted, sorted$V2 = as.numeric(sorted$V2))
?transform
transform(sorted, V2 = as.numeric(V2))
sorted <- sorted[order(V2, decreasing = T), ]
sorted <- sorted[order(sorted$V2, decreasing = T), ]
sorted[13, 1]
head(sorted, 13)
str(sorted)
sorted <- transform(sorted, V2 = as.numeric(V2))
sorted <- sorted[order(sorted$V2, decreasing = T), ]
head(sorted, 13)
out <- merge(sorted, edudata, by.x = 'V1', by.y = 'CountryCode')
str(out)
oecd <- out[which(out$Income.Group == 'High Income: OECD'),]
mean(oecd$V2)
mean(oecd$V2, na.rm = T)
dim(oecd)
head(out$Income.Group)
levels(out$Income.Group)
oecd <- out[which(out$Income.Group == 3),]
dim(oecd)
oecd <- out[which(out$Income.Group == 2),]
dim(oecd)
oecd <- out[which(out$Income.Group == 'High income: OECD'),]
dim(oecd)
mean(oecd$V2)
install.packages("Hmisc")
library(Hmisc)
out$gdpGroups <- cut2(out$V2, g=5)
newtable <- out[, c('V2', 'Income.Group')]
head(newtable)
newtable <- out[, c('gdpGroups', 'Income.Group')]
head(newtable)
count(newtable[, which(newtable$gdpGroups == '[ 1, 39)')])
dim(newtable[, which(newtable$gdpGroups == '[ 1, 39)')])
dim(newtable[which(newtable$gdpGroups == '[ 1, 39)'),])
dim(newtable[which(newtable$gdpGroups == '[ 1, 39)' & newtable$Income.Group == 'Lower middle'),])
newtable[which(newtable$gdpGroups == '[ 1, 39)' & newtable$Income.Group == 'Lower middle'),]
newtable[which(newtable$Income.Group == 'Lower middle'),]
newtable[which(newtable$gdpGroups == '[ 1, 39)' & newtable$Income.Group == 'Lower middle income'),]
newtable[which(newtable$Income.Group == 'Lower middle income'),]
newtable[(newtable$Income.Group == 'Lower middle income'),]
newtable[(newtable$Income.Group == 'Lower middle income' & newtable$gdpGroups == 1),]
newtable[(newtable$Income.Group == 'Lower middle income' & newtable$gdpGroups == '[  1, 39)'),]
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
setwd("C:/Users/cogtepsum/Desktop/getdata_project")
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
View(fulldata)
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
source('C:/Users/cogtepsum/Desktop/getdata_project/run_analysis.R')
View(trainset)
View(testset)
View(fulldata)
