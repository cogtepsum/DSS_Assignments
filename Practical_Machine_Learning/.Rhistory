plot(fit)
n <- 1000; x <- c(rnorm(n)); y <- x + rnorm(n)
fit <- lm(y~x)
plot(fit)
?rt
n <- 1000; x <- c(rnorm(n)); y <- x + rt(n, df = 1000)
fit <- lm(y~x)
plot(fit)
library(MASS)
?shuttle
data("shuttle")
tail(shuttle)
hw <- shuttle[which(shuttle$wind == 'head'), use]
hw <- shuttle[which(shuttle$wind == 'head'), 'use']
head(hw)
sum(hw)
sum(hw == 'auto')
tw <- shuttle[which(shuttle$wind == 'tail'), 'use']
sum(tw == 'auto')
72/73
windlm <- glm(shuttle$use ~ shuttle$wind, family = 'binomial')
summary(windlm)
-0.25131/-0.03181
exp(-0.03181)
windlm <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family = 'binomial')
summary(windlm)
exp(-3.201e-02)
windlm <- glm(1-shuttle$use ~ shuttle$wind, family = 'binomial')
windlm <- glm(I(1-shuttle$use) ~ shuttle$wind, family = 'binomial')
windlm <- glm(factor(1-shuttle$use) ~ shuttle$wind, family = 'binomial')
windlm <- glm(shuttle$use ~ shuttle$wind, family = 'binomial')
summary(windlm)
shuttle$muse <- 1 - shuttle$use
View(shuttle)
shuttle$muse <- factor(shuttle$use, levels(shuttle$use)[c('noauto, auto')])
View(shuttle)
shuttle$muse <- factor(shuttle$use, levels = [c('noauto, auto')])
shuttle$muse <- factor(shuttle$use, levels = c('noauto, auto'))
View(shuttle)
shuttle$muse <- factor(shuttle$muse, levels = c('noauto, auto'))
shuttle$muse <- shuttle$use
shuttle$muse <- factor(shuttle$muse, levels = c('noauto, auto'))
shuttle$muse <- shuttle$use
levels(shuttle$muse, levels=['noauto', 'auto'])
levels(shuttle$muse, levels=c('noauto', 'auto'))
levels(shuttle$muse) <- c('noauto', 'auto')
windlm2 <- glm(shuttle$muse ~ shuttle$wind, family = 'binomial')
summary(windlm)
summary(windlm2)
data("InsectSprays")
?InsectSprays
inslm <- glm(count ~ factor(spray), data = InsectSprays, family = 'poisson')
summary(inslm)
exp(0.05588)
inslm <- glm(count ~ spray, data = InsectSprays, family = 'poisson')
summary(inslm)
2.67415/0.05588
exp(2.67415)/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot)*(x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y ~ xMat - 1))
summary(lm(y ~ xMat))
yhat <- predict(lm(y ~ xMat))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
inslm <- glm(count ~ spray, data = InsectSprays, family = 'poisson')
summary(inslm)
0.05588/2.67415
exp(0.05588/2.67415)
exp(0.05588)/exp(2.67415)
exp(2.67415)/exp(0.05588)
exp(2.67415/0.05588)
log(2.67415/0.05588)
log(2.67415)/log(0.05588)
inslm <- glm(count ~ spray + 1, data = InsectSprays, family = 'poisson')
summary(inslm)
log(0.05588/2.67415)
log(0.05588)/log(2.67415)
2.67415/(2.67415 + 0.05588)
2.67415/(2.67415 - 0.05588)
(2.67415 - 0.05588)/2.67415
inslm <- glm(count ~ factor(spray), data = InsectSprays, family = 'poisson')
summary(inslm)
inslm <- glm(count ~ factor(spray) - 1, data = InsectSprays, family = 'poisson')
summary(inslm)
2.67415/2.73003
exp(2.67415/2.73003)
exp(2.67415)/exp(2.73003)
log(2, 3)
log(6, 4)
log(5, 2)
log(3, 2)
log(1, 2)
log(5, 4)
log(9, 3)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData <- data.frame(predictors)
adData <- data.frame(diagnosis, predictors)
View(adData)
install.packages('caret')
adData <- data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list = F)
trainIndex -> createDataPartition(diagnosis, p = 0.50, list = F)
trainIndex <- createDataPartition(diagnosis, p = 0.50, list = F)
library(caret)
trainIndex <- createDataPartition(diagnosis, p = 0.50, list = F)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
View(testing)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
hist(mixtures$Superplasticizer)
hist(log10(mixtures$Superplasticizer))
View(mixtures)
log10(0)
log10(0.0)
hist(log10(mixtures$Superplasticizer + 1))
hist(log10(mixtures$Superplasticizer + 10))
hist(log10(mixtures$Superplasticizer + 1))
clc
clc()
clear()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
createDataPartition(adData$diagnosis, p = 3/4)
createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
names(training)
names(training)[grep('IL')]
grep("IL", names(training))
grep(".IL", names(training))
grep("^IL", names(training))
ils <- training[grep("^IL", names(training))]
View(ils)
View(training)
prComp <- prcomp(ils)
prComp
prComp <- preProcess(ils, method = 'pca', pcaComp = 7)
prComp
summary(prComp)
str(prComp)
prComp <- preProcess(ils, method = 'pca', pcaComp = 7, thresh = 0.9)
prComp
prComp <- preProcess(ils, method = 'pca', thresh = 0.9)
prComp
View(ils)
?"AppliedPredictiveModeling-package"
?"AppliedPredictiveModeling"
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ils <- data.frame(training$diagnosis, training[grep("^IL", names(training))])
View(ils)
preComp <- preProcess(ils, method = 'pca', thresh = 0.8)
?train
m1 <- train(ils[, -1], training$diagnosis, method = 'glm')
m1 <- train(ils[, -1], ils[, 1], method = 'glm')
install.packages('e1071')
m1 <- train(ils[, -1], ils[, 1], method = 'glm')
head(ils[, -1])
head(ils[, 1])
View(ils)
m1 <- train(training.diagnosis ~ ., data = ils, method = 'glm')
pred1 <- predict(m1, testing)
summary(pred1)
summary(m1)
m1
preComp <- preProcess(ils[, -1], method = 'pca', thresh = 0.8)
m2 <- train(training.diagnosis ~ ., data = preComp, method = 'glm')
m2 <- train(ils$training.diagnosis ~ ., data = preComp$x, method = 'glm')
m2 <- train(training.diagnosis ~ ., data = preComp$x, method = 'glm')
pred2 <- predict(preComp, ils$training.diagnosis)
pred2 <- predict(preComp, ils[, 1])
preComp$x
preComp$x[, 1]
preComp <- preProcess(ils[, -1], method = 'pca', thresh = 0.8)
pred2 <- predict(preComp, ils[, -1])
pred2
m2 <- train(ils$training.diagnosis ~ ., data = preComp, method = 'glm')
m2 <- train(ils$training.diagnosis ~ ., data = pred2, method = 'glm')
m2
pcails <- prcomp(ils[, -1])
pred1 <- predict(m1, testing)
confusionMatrix(pred1, testing$diagnosis)
pred2 <- predict(m2, testing)
pred2 <- predict(m2, testing$diagnosis)
m1 <- train(training.diagnosis ~ ., data = ils, method = 'glm')
pr1 <- predict(m1, training$diagnosis)
pr1 <- predict(m1, training)
pr1 <- predict(m1, testing$diagnosis)
pr1 <- predict(m1, testing)
confusionMatrix(pr1, testing$diagnosis)
pr2 <- predict(m2, testing)
?predict
?predict
m2 <- train(training.diagnosis ~ ., data = data.frame(ils$training.diagnosis, pred2), method = 'glm')
pcails <- data.frame(training$diagnosis, pred2)
m2 <- train(training.diagnosis ~ ., data = pcails, method = 'glm')
pr2 <- predict(m2, testing)
pr2 <- predict(m2, testing$diagnosis)
pr1 <- predict(m1, testing)
preProc <- preProcess(ils[, -1], method = 'pca', thresh = 0.8)
trainPC <- predict(preProc, ils[, -1])
modelFit <- train(training$diagnosis ~ ., data = trainPC, method = 'glm')
testPC <- predict(preProc, testing[, -1])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer + 1))
hist(log(mixtures$Superplasticizer))
hist(log(mixtures$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ils <- training[grep('^IL', names(training))]
preProc <- preProcess(ils, method = 'pca', thresh = 0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages('AppliedPredictiveModeling')
install.packages('ElemStatLearn')
install.packages('pgmm', 'rpart')
install.packages('pgmm')
install.packages(rpart')
install.packages('rpart')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case, p=0.7, list=F)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modelFit <- train(Case ~ ., data = training, method = 'rpart')
View(testing)
modelFit <- train(Class ~ ., data = training, method = 'rpart')
testing[which(testing$TotalIntenCh2 == 23.00)]
testing[which(testing$TotalIntenCh2 == 23.00), ]
testing[which(testing$TotalIntenCh2 == 23000), ]
testing[, which(testing$TotalIntenCh2 == 23000)]
testing[testing$TotalIntenCh2 == 23000, ]
testing[testing$TotalIntenCh2 == 23000]
testing[, testing$TotalIntenCh2 == 23000]
subset(testing, testing$TotalIntenCh1 == 23000)
testing[, testing$TotalIntenCh2 == 0]
testing[testing$TotalIntenCh2 == 0]
testing[testing$TotalIntenCh2 == 0,]
testing[testing$TotalIntenCh2 == 23000,]
testing[testing$TotalIntenCh2 == 23,]
modelFit
text(modelFit$finalModel, use.n = T, all = T, cex=0.8)
plot(modelFit$finalModel, uniform = T)
text(modelFit$finalModel, use.n = T, all = T, cex=0.8)
3.934e04
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., data = olive, method = 'rpart')
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
pred <- predict(modFit, newdata = newdata)
plot(modFit$finalModel, uniform = T)
text(modFit$finalModel, use.n = T, all = T, cex = 0.8)
View(olive)
mean(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(trainSA)
View(trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = 'glm', family = 'binomial')
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modFit, testSA))
missClass(trainSA$chd, predict(modFit, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
library(caret)
varlmp
varImp(modFit)
View(vowel.train)
modFit <- train(y ~ ., data = vowel.train, method = 'rf', trControl=trainControl(method = 'oob'))
varImp(modFit)
varImp(modFit, scale = F)
install.packages('randomForest')
library(randomForest)
fit <- randomForest(y ~ ., data = vowel.train)
varImp(fit)
set.seed(33833)
fit <- randomForest(y ~ ., data = vowel.train)
varImp(fit)
modFit <- train(y ~ ., data = vowel.train, method = 'rf', trControl=trainControl(method = 'oob'))
varImp(modFit)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
varImp(modFit)
varImp(modFit, scale = F)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
varImp(modFit)
varImp(modFit, scale = F)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
varImp(modFit)
fit <- randomForest((y ~ ., data = vowel.train))
fit <- randomForest(y ~ ., data = vowel.train)
varImp(fit)
set.seed(33833)
fit <- randomForest(y ~ ., data = vowel.train)
varImp(fit)
library(caret)
?varImp
sessionInfo()
library(randomForest)
sessionInfo()
library(ElemStatLearn)
sessionInfo()
library(rpart)
sessionInfo()
install.packages('installr')
updateR()
require(installr)
updateR()
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
library(caret)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
varImp(modFit)
modFit <- train(y ~ ., data = vowel.train, method = 'rf', trControl=trainControl(method='oob'))
varImp(modFit)
modFit <- randomForest(y ~ ., data = vowel.train)
varImp(modFit)
vowel.train$y <- factor(vowel.train$y)
modFit <- train(y ~ ., data = vowel.train, method = 'rf', trControl=trainControl(method='oob'))
varImp(modFit)
modFit <- train(y ~ ., data = vowel.train, method = 'rf')
varImp(modFit)
modFit <- randomForest(y ~ ., data = vowel.train)
varImp(modFit)
modFit <- train(y ~ ., data = rbind(vowel.train, vowel.test), method = 'rf')
varImp(modFit)
modFit <- randomForest(y ~ ., data = rbind(vowel.train, vowel.test))
varImp(modFit)
varImp(modFit, scale = T)
varImp(modFit, scale = F)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
дшикфкн(сфку)
library(caret)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
modFit <- randomForest(y ~ ., data = vowel.train)
library(randomForest)
modFit <- randomForest(y ~ ., data = vowel.train)
varImp(modFit)["Overall"]
sort(varImp(modFit)["Overall"])
sort(varImp(modFit), modFit$Overall)
sort(varImp(modFit))
sort(varImp(modFit), 2)
order(varImp(modFit)["Overall"])
data <- read.table("C:\\Users\\cogtepsum\\Desktop\\Komponent_Work\\analyse\\1\\1_0.txt")
data <- read.table("C:\\Users\\cogtepsum\\Desktop\\Komponent_Work\\analyse\\1\\1_0.txt", header = T)
install.packages(c('AppliedPredictiveModeling', 'caret', 'ElemStatLearn', 'pgmm', 'rpart', 'gbm', 'lubridate', 'forecast', 'e1071'))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
m1 <- train(diagnosis ~ ., data = training, method = 'rf')
m2 <- train(diagnosis ~ ., data = training, method = 'gbm')
m3 <- train(diagnosis ~ ., data = training, method = 'lda')
p1 <- predict(m1, testing)
p2 <- predict(m2, testing)
p3 <- predict(m3, testing)
combDF <- data.frame(p1, p2, p3, testing$diagnosis)
combM <- train(diagnosis ~ ., data = combDF, method = 'rf')
combDF <- data.frame(p1, p2, p3, diagnosis = testing$diagnosis)
combM <- train(diagnosis ~ ., data = combDF, method = 'rf')
confusionMatrix(p1, testing$diagnosis)
confusionMatrix(p2, testing$diagnosis)
confusionMatrix(p3, testing$diagnosis)
confusionMatrix(predict(combM, combDF), testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mFit <- train(CompressiveStrength ~ ., data = training, method = 'lasso')
plot.enet(mFit$finalModel)
plot.enet()
plot.enet
plot(mFit$finalModel)
mFit$finalModel['vn']
plot(mFit$finalModel, col = mFit$finalModel['vn'])
plot(mFit$finalModel, color = mFit$finalModel['vn'])
plot(mFit$finalModel, col = color(mFit$finalModel['vn']))
plot(mFit$finalModel, legend = mFit$finalModel['vn'])
legend(mFit$finalModel['vn'])
plot(mFit$finalModel, colot.palette = terrain.colors)
plot.enet(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
source('~/.active-rstudio-document')
plot.enet2(mFit$finalModel, use.color = T)
plot.enet2(mFit$finalModel, use.color = T, xvar = 'step')
set.seed(233)
mFit <- train(CompressiveStrength ~ ., data = training, method = 'lasso')
plot.enet2(mFit$finalModel, use.color = T, xvar = 'step')
plot.enet2(mFit$finalModel, use.color = T, xvar = 'penalty')
install.packages(c('rpart', 'corrplot'))
install.packages(c('rpart.plot'))
setwd("C:/Users/cogtepsum/Desktop/Practical_Machine_Learning")
