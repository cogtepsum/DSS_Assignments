library(swirl)
swirl()
library(dplyr)
cran <- tbl_df("mydf")
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
x1 <- c(4, 5, 2, 3)
x2 <- c(2, 2, 6, 0)
y <- c(8, 4, 2, 8)
mat <- matrix(c(x1, x2), nrow = 4, ncol = 1)
mat
?matrix
x1
mat <- cbind(mat, x2)
mat
mat <- cbind(x1, x2)
mat
fit <- lsfit(mat, y)
?lsfit
coef()
coef(fit)
fit <- lsfit(mat, y, intercept = T)
coef(fit)
options(digits = 15)
coef(fit)
fit <- lsfit(mat, y, intercept = T)
coef(fit)
fit <- lsfit(mat, y, intercept = T, tolerance = 1e-3)
coef(fit)
fit <- lsfit(mat, y, intercept = T, tolerance = 1e-2)
coef(fit)
s <- solve(mat, y)
s <- linsolve(mat, y)
x1 <- c(4, 5, 2, 3)
x2 <- c(2, 2, 6, 0)
y <- c(8, 4, 2, 8)
x1%*%x2
x1%*%t(x2)
t(x1)%*%x2
x1*x2
t(x1)%*%x1
ee1 <- c(t(x1)%*%x1, t(x1)%*%x2)
ee1
ee2 <- c(t(x2)%*%x1, t(x2)%*%x2)
ee2
fe1 <- t(y)%*%x1
fe2 <- t(y)%*%x2
ee <- rbind(ee1, ee2)
ee
fit <- solve(ee, y)
fe <- rbind(fe1, fe2)
fe
fit <- solve(ee, fe)
fit
options(digits = 15)
fit
?readline
strsplit(readline(), sep=" ")
strsplit(readline())
strsplit(readline(), split = " ")
as.integer(strsplit(readline(), split = " "))
as.integers(strsplit(readline(), split = " "))
as.integer(strsplit(readline(), split = " ")[[1]])
n <- dims[1]
as.integer(strsplit(readline(), split = " ")[[1]])[1]
4
for(i in 1:4){}
for(i in 1:4){
i
}
for(i in 1:4){
print(i)
}
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
equations[1, ]
equations[, 1]
equations
equations[, m + 1]
equations[, 1:m]
equations[1, 1]
equations[1, 2]
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
?print
print(solution, row.names=F)
print(solutions, row.names=F)
print(solutions, row.names=FALSE)
?cat
cat(solutions)
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
dims <- ""
length(dims)
dims == ""
a <- strsplit(readline(), split = " ")[[1]]
a == ""
a
length(a)
dims <- ''
length(dims)
a <- strsplit(readline(), split = " ")[[1]]
length(a)
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
?stopifnot
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
4 2 8
5 2 4
2 6 2
3 0 8
124124
asdasf
sfgdhdfgjhf
exit
0
source('C:/Users/cogtepsum/Desktop/script.R')
ls()
n
m
source('C:/Users/cogtepsum/Desktop/script.R')
4 2 8
5 2 4
2 6 2
3 0 8
4
source('C:/Users/cogtepsum/Desktop/script.R')
4 2 8
5 2 4
2 6 2
3 0 8
a
source('C:/Users/cogtepsum/Desktop/script.R')
ls()
source('C:/Users/cogtepsum/Desktop/script.R')
4 2 8
5 2 4
2 6 2
3 0 8
ls()
source('C:/Users/cogtepsum/Desktop/script.R')
ls()
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
options(show.error.messages = T)
source('C:/Users/cogtepsum/Desktop/script.R')
dims <- strsplit(readline(), split = " ")[[1]]
dims[1]
dims <- as.integer(dims)
dims[1]
dims[2]
dims[0]
dims[3]
source('C:/Users/cogtepsum/Desktop/script.R')
matrix(nrow = 2, ncol = 2)
matrix(, nrow = 2, ncol = 2)
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
source('C:/Users/cogtepsum/Desktop/script.R')
library(swirl)
install_from_swirl("Statistical_Inference")
swirl()
library(swirl)
swirl()
33/36
deck
52
4/52
1/52 + 1/51 + 1/50 + 1/49 + 1/48
1/52 * 1/51 * 1/50 * 1/49 * 1/48
12/52
11/51 + 12/51
2/51
1.28
1.6*0.8
1.6*0.8/2
1.6*0.8/2
mypdf
mypdf()
mypdf
integrate(mypdf, 0, 1.6)
integrate(mypdf, 0, 1.5)
1
sqrt(2)
?pnorm
pnorm(93, 100, 10)
pnorm(93, 100, 100)
0.93*0.05/(0.93*0.05+(1-0.88)*(1-0.05))
1-0.93*0.05/(0.93*0.05+(1-0.88)*(1-0.05))
(1-0.88)*(1-0.05)/(0.93*0.05 + (1-0.88)*(1-0.05))
0.88*0.95/(0.88*0.95+0.07*0.05)
round(pnorm(5, 100, 10, lower.tail = F), 3)
round(pnorm(5, 100, 10, lower.tail = F), 100)
pnorm(5, 100, 10, lower.tail = F)
pnorm(0.05, 100, 10, lower.tail = F)
qnorm(0.05, 100, 10, lower.tail = F)
qnorm(5, 100, 10, lower.tail = F)
qnorm(0.05, 100, 10, lower.tail = F)
round(qnorm(0.05, 100, 10, lower.tail = F), 3)
round(qnorm(0.05, 100, 10/sqrt(50), lower.tail = F), 3)
choose(6, 5)*(0.5^5)*(0.5)
choose(6, 5)*0.5^5*0.5
choose(6, 5)*0.5^5*0.5 + 0.5^6
?punif
round(pnorm(0.51, 0.5, 1/12/100), 3)
round(pnorm(0.51, 0.5, 1/12/100, lower.tail = F), 3)
round(pnorm(0.51, 0.5, sqrt(1/12/100), lower.tail = F), 3)
dice <- replicate(10, sample(6, 10^6, replace=T))
sd(dice)
1.708015^2/10
?ppois
dpois(20, 16.5*2)
pnorm(70, 80, 10)
qnorm(95, 1100, 75)
qnorm(.95, 1100, 75)
qnorm(.95, 1100, 75/10)
pbinom(3, prob = 0.5, size = 5, lower.tail = F)
?runif
?rnomr
?rnorm
q7 <- rnorm(1000, 0.5, sqrt(1/12))
mean(q7)
ppois(10, lambda = 5*3)
q6 <- rnorm(100, 15, 10)
1 - pnorm(14, 15, 10) - pnorm(16, 15, 10, lower.tail = F)
hist(q6)
q6sub <- q6[q6 >=14 & q6 <= 16]
1 - pnorm(14, 15, 1) - pnorm(16, 15, 1, lower.tail = F)
n <- 7
k <- 5
for (i in 1:k):
for (i in [1:k]):
for (i in c(1:k)):
for (i in seq(1, k, by=1)):
for (i in seq(1, k, by=1)) {}
for (i in seq(1, k, by=1)) {
}
for (i in seq(1, k, by=1)) {
i
}
for (i in seq(1, k, by=1)) {
print(i)
}
s <- 0
for (i in seq(1, k, by=1)) {
s <- s + (-1)^(k-i) * choose(k, i)*i^n
}
s
cos(-2*atan(sqrt(3)/4))
atan(sqrt(3)/4)
atan(sqrt(3)/4)*(-2)
cos(atan(sqrt(3)/4)*(-2))
sin(atan(sqrt(3)/4)*(-2))
(1/2+sqrt(5)/2)^42 + (1/2-sqrt(5)/2)^42
(3/2)/(1/2)
-pi
-cos(42*pi/3) - (3/sqrt(3))*sin(42*pi/3)
-cos(40*pi/3) - (3/sqrt(3))*sin(40*pi/3)
stormdata <- read.csv(url("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"))
setwd("C:/Users/cogtepsum/Desktop/RepRes_Assignment_2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "StormData.csv.bz2")
events <- read.csv("StormData.csv.bz2")
summary(events)
str(events)
head(events['EVTYPE', 'FATALITIES', 'INJURIES'])
head(events['EVTYPE', 'FATALITIES', 'INJURIES', ])
head(events[, c('EVTYPE', 'FATALITIES', 'INJURIES')])
head(events[, c('EVTYPE', 'FATALITIES', 'INJURIES', 'PROPDMG', 'PROPDMGEXP')])
unique(events[, c('PROPDMGEXP')])
eventsdamage <- events[, c('EVTYPE', 'FATALITIES', 'INJURIES', 'PROPDMG', 'CROPDMG')]
eventsdamage <- subset(events, select = c('EVTYPE', 'FATALITIES', 'INJURIES', 'PROPDMG', 'CROPDMG'))
View(eventsdamage)
library(plyr)
sums <- ddply(eventsdamage, .('EVTYPE'), sum)
sum(eventsdamage$FATALITIES)
sum(eventsdamage$INJURIES)
sum(eventsdamage$PROPDMG)
sum(eventsdamage$CROPDMG)
sums <- ddply(eventsdamage, .(EVTYPE), sum)
sums <- ddply(eventsdamage, .(EVTYPE), Fatalities = sum(FATALITIES))
sums <- ddply(eventsdamage, .(EVTYPE), Fatalities = sum(FATALITIES), Injuries = sum(INJURIES), Property.Damage = sum(PROPDMG), Crops.Damage = sum(CROPDMG))
View(sums)
sums <- ddply(eventsdamage, .(EVTYPE), numcolwise(sum))
View(sums)
notempty <- sums[apply(sums[, -1], 1, function(x) !all(x==0)), ]
View(notempty)
barplot(notempty$FATALITIES, notempty$EVTYPE)
any(!is.na(notempty))
notempty <- notempty[complete.cases(notempty), ]
any(!is.na(notempty))
any(is.na(notempty))
notempty <- sums[apply(sums[, -1], 1, function(x) !all(x==0)), ]
any(is.na(notempty))
typeof(notempty$EVTYPE)
typeof(notempty$PROPDMG)
notempty$EVTYPE[is.na(notempty$EVTYPE)]
notempty$FATALITIES[is.na(notempty$FATALITIES)]
notempty$INJURIES[is.na(notempty$INJURIES)]
barplot(notempty$FATALITIES, notempty$EVTYPE)
barplot(notempty$FATALITIES)
quantile(.90, notempty$FATALITIES)
?percentile
quantile(notempty$FATALITIES, 0.9)
quantile(notempty$FATALITIES, 0.1)
quantile(notempty$FATALITIES, 0.95)
?hyst
hist(notempty$FATALITIES)
length(notempty[which(notempty$FATALITIES > 71.15)])
length(notempty[which(notempty$FATALITIES > 71.15), ])
quantile(notempty$FATALITIES, 0.90)
length(notempty[which(notempty$FATALITIES > 14), ])
length(notempty[which(notempty$FATALITIES > 10), ])
length(notempty[which(notempty$FATALITIES > 6), ])
length(notempty[which(notempty$FATALITIES > 4), ])
length(notempty[which(notempty$FATALITIES > 2), ])
length(notempty$FATALITIES[which(notempty$FATALITIES > 71.15), ])
length(notempty$FATALITIES[which(notempty$FATALITIES > 71.15)])
length(notempty$FATALITIES[which(notempty$FATALITIES > 14)])
length(notempty$FATALITIES[which(notempty$FATALITIES > 14, notempty$INJURIES > 10)])
topfatalities <- notempty$FATALITIES[which(notempty$FATALITIES > 71.15), c('EVTYPE', 'FATALITIES')]
topfatalities <- notempty[which(notempty$FATALITIES > 71.15), c('EVTYPE', 'FATALITIES')]
View(topfatalities)
barplot(topfatalities$FATALITIES)
barplot(topfatalities$FATALITIES, names.arg = topfatalities$EVTYPE)
length(notempty$INJURIES[which(notempty$INJURIES > 300.25)])
length(notempty$PROPDMG[which(notempty$PROPDMG > 15033.24)])
topfatalities <- notempty$FATALITIES[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)), c('EVTYPE', 'FATALITIES')]
topinjuries <- notempty$INJURIES[which(notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'INJURIES')]
toppropdmg <- notempty$PROPDMG[which(notempty$PROPDMG > quantile(notempty$PROPDMG, 0.95)), c('EVTYPE', 'PROPDMG')]
topcropdmg <- notempty$CROPDMG[which(notempty$CROPDMG > quantile(notempty$CROPDMG, 0.95)), c('EVTYPE', 'CROPDMG')]
topfatalities <- notempty$FATALITIES[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)), c('EVTYPE', 'FATALITIES')]
topfatalities <- notempty$FATALITIES[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)[1]), c('EVTYPE', 'FATALITIES')]
topfatalities <- notempty$FATALITIES[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)[0]), c('EVTYPE', 'FATALITIES')]
typeof(quantile(notempty$FATALITIES, 0.95))
topfatalities <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)), c('EVTYPE', 'FATALITIES')]
topinjuries <- notempty[which(notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'INJURIES')]
toppropdmg <- notempty[which(notempty$PROPDMG > quantile(notempty$PROPDMG, 0.95)), c('EVTYPE', 'PROPDMG')]
topcropdmg <- notempty[which(notempty$CROPDMG > quantile(notempty$CROPDMG, 0.95)), c('EVTYPE', 'CROPDMG')]
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar()
library(ggplot2)
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar()
print(c)
qplot(x=topfatalities$EVTYPE, y=topfatalities$FATALITIES, geom='bar')
qplot(x=topfatalities$EVTYPE, y=topfatalities$FATALITIES, geom='bar', stat = 'bin')
qplot(x=topfatalities$EVTYPE, y=topfatalities$FATALITIES, geom='bar', stat = 'identity')
qplot(x=topfatalities$EVTYPE, y=topfatalities$FATALITIES, geom='bar', stat = 'identity', position = 'dodge')
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(c)
topfatalities <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.99)), c('EVTYPE', 'FATALITIES')]
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(c)
topfatalities <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95)), c('EVTYPE', 'FATALITIES')]
c <- ggplot() + geom_bar(topfatalities, aes(EVTYPE, FATALITIES), stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + geom_bar(topinjuries, aes(EVTYPE, INJURIES)) + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + geom_bar(topinjuries, aes(EVTYPE, INJURIES), stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
c <- ggplot() + geom_bar(topfatalities, aes(EVTYPE, FATALITIES), stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(c)
cc <- ggplot()
cc <- cc + geom_bar(topfatalities, aes(EVTYPE, FATALITIES), stat = 'identity')
?geom_bar
cc <- cc + geom_bar(topfatalities, mapping = aes(EVTYPE, FATALITIES), stat = 'identity')
cc <- cc + geom_bar(topinjuries, mapping = aes(EVTYPE, INJURIES), stat = 'identity')
cc <- cc + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(cc)
cc <- cc + facet_wrap(facets = c(FATALITIES, INJURIES))
cc <- ggplot()
cc <- cc + geom_bar(topinjuries, mapping = aes(EVTYPE, INJURIES), stat = 'identity') + facet_wrap( ~ INJURIES)
cc <- cc + geom_bar(topfatalities, mapping = aes(EVTYPE, FATALITIES), stat = 'identity') + facet_wrap( ~ FATALITIES)
print(cc)
cc <- ggplot()
cc <- cc + geom_bar(topinjuries, mapping = aes(EVTYPE, INJURIES), stat = 'identity') + facet_wrap( ~ EVTYPE)
cc <- cc + geom_bar(topfatalities, mapping = aes(EVTYPE, FATALITIES), stat = 'identity') + facet_wrap( ~ EVTYPE)
cc <- cc + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(cc)
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(c)
cc <- ggplot(topinjuries, aes(EVTYPE, INJURIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(cc)
multiplot(c, cc, cols=2)
grid.arrange(c, cc, ncol=2)
install.packages('gridExtra')
library(gridExtra)
grid.arrange(c, cc, nrow=2)
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab()
c <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('')
print(c)
cc <- ggplot(topinjuries, aes(EVTYPE, INJURIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('')
grid.arrange(c, cc, nrow=2)
grid.arrange(c, cc, ncol=2)
dim(notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.975)), c('EVTYPE', 'FATALITIES')])
dim(notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.99)), c('EVTYPE', 'FATALITIES')])
dim(notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.97)), c('EVTYPE', 'FATALITIES')])
health <- merge(topfatalities, topinjuries, by = intersect(EVTYPE))
health <- merge(topfatalities, topinjuries, by.x = intersect(EVTYPE))
health <- merge(topfatalities, topinjuries, by.y = intersect(EVTYPE))
health <- merge(topfatalities, topinjuries, by = EVTYPE)
health <- merge(topfatalities, topinjuries, by = 'EVTYPE')
View(health)
health <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95, notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'FATALITIES')]
health <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95), notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'FATALITIES')]
View(health)
health <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95), notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'FATALITIES', 'INJURIES')]
economics <- notempty[which(notempty$PROPDMG > quantile(notempty$PROPDMG, 0.95), notempty$CROPDMG > quantile(notempty$CROPDMG, 0.95)), c('EVTYPE', 'PROPDMG', 'CROPDMG')]
plt <- ggplot() + geom_bar(aes(EVTYPE, FATALITIES), health, color = 'red')
plt <- plt + geom_bar(aes(EVTYPE, INJURIES), health, color = 'blue')
print(plt)
plt <- ggplot() + geom_bar(aes(EVTYPE, FATALITIES), health, color = 'red', stat = 'identity')
plt <- plt + geom_bar(aes(EVTYPE, INJURIES), health, color = 'blue', stat = 'identity')
print(plt)
plt <- plt + geom_bar(aes(EVTYPE, INJURIES), health, fill = 'blue', stat = 'identity')
print(plt)
plt <- ggplot() + geom_bar(aes(EVTYPE, FATALITIES), health, fill = 'red', stat = 'identity', alpha=0.5)
plt <- plt + geom_bar(aes(EVTYPE, INJURIES), health, fill = 'blue', stat = 'identity', alpha=0.5)
print(plt)
plt <- plt + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
print(plt)
fatplt <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Fatalities')
injplt <- ggplot(topinjuries, aes(EVTYPE, INJURIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Injuries')
grid.arrange(c, cc, ncol=2)
grid.arrange(fatplt, injplt, ncol=2)
health <- notempty[which(notempty$FATALITIES > quantile(notempty$FATALITIES, 0.95), notempty$INJURIES > quantile(notempty$INJURIES, 0.95)), c('EVTYPE', 'FATALITIES', 'INJURIES')]
economics <- notempty[which(notempty$PROPDMG > quantile(notempty$PROPDMG, 0.95), notempty$CROPDMG > quantile(notempty$CROPDMG, 0.95)), c('EVTYPE', 'PROPDMG', 'CROPDMG')]
fatplt <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Fatalities')
injplt <- ggplot(topinjuries, aes(EVTYPE, INJURIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=1)) + xlab('Type of event') + ylab('Injuries')
grid.arrange(fatplt, injplt, ncol=2)
fatplt <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=0.5,vjust=0.5)) + xlab('Type of event') + ylab('Fatalities')
grid.arrange(fatplt, injplt, ncol=2)
fatplt <- ggplot(topfatalities, aes(EVTYPE, FATALITIES)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=0.5,vjust=0.5), text = element_text(size=10)) + xlab('Type of event') + ylab('Fatalities')
grid.arrange(fatplt, injplt, ncol=2)
summary(notempty$FATALITIES)
summary(notempty$INJURIES)
propplt <- ggplot(toppropdmg, aes(EVTYPE, PROPDMG)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Damage to property')
cropplt <- ggplot(topcropdmg, aes(EVTYPE, CROPDMG)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Damage to crops')
grid.arrange(propplt, cropplt, ncol=2)
notempty$DAMAGE <- notempty$PROPDMG + notempty$CROPDMG
topdmg <- notempty[which(notempty$DAMAGE > quantile(notempty$DAMAGE, 0.97)), c('EVTYPE', 'DAMAGE')]
View(topdmg)
damageplt <- ggplot(topdmg, aes(EVTYPE, DAMAGE)) + geom_bar(stat = 'identity') + theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + xlab('Type of event') + ylab('Total damage')
print(damageplt)
